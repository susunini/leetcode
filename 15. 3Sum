# Note

# Solution 1: O(n^2); beats 100%
# 2Sum
# corner cases: duplicate numbers

class Solution:
    # @param {integer[]} nums
    # @return {integer[][]}
    def threeSum(self, nums):
        nums.sort()
        r_list = list()
        for i in range(len(nums) - 2):
            if i > 0 and nums[i] == nums[i-1]:
                continue
            if nums[i] > 0: #
                break #
            num1 = nums[i]
            p1 = i + 1
            p2 = len(nums) - 1
            while p1 < p2:
                num2 = nums[p1]; num3 = nums[p2]
                if (num2 + num3) == (-num1):
                    r_list.append((num1, num2, num3))
                    p1 += 1; p2 -= 1
                    while p1 < p2 and nums[p1] == num2:
                        p1 += 1
                    while p1 < p2 and nums[p2] == num3:
                        p2 -= 1
                elif (num2 + num3) < (-num1):
                    p1 += 1
                else: # (num2 + num3) > (-num1):
                    p2 -= 1
        return r_list
