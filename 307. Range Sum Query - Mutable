# Note
# Solution 3: segment tree represented as a list
# for binary tree, there is at most 2*n nodes in the tree (n + n/2 + n/4 + ... + 1 ~ 2n)
# use a list of 2*n elements to represent a segment tree which is a complete binary tree
# for a complete binary tree represented as a list, if a node's index is i, its parent node (i/2) , its left child (i*2)
# and its right child (i*2+1)
# buildTree(), updateTree() and getSumFromTree() all done in a bottom-up way

class NumArray(object):
    def __init__(self, nums):
        """
        initialize your data structure here.
        :type nums: List[int]
        """
        self.nums = nums
        n = len(nums)
        self.tree = [0] * (n * 2) 
        self.buildTree(nums, self.tree)
        
    def buildTree(self, nums, tree):
        n = len(nums)
        for i, num in enumerate(nums):
            tree[n + i] = num
        for i in range(n - 1, 0, -1):
            tree[i] = tree[i * 2] + tree[i * 2 + 1]
        
    def update(self, i, val):
        """
        :type i: int
        :type val: int
        :rtype: int
        """
        self.nums[i] = val
        self.updateTree(i, val, self.tree)
        
    def updateTree(self, i, val, tree):
        n = len(self.nums)
        j = n + i
        tree[j] = val
        while j > 0:
            # parent: j / 2; left of parent: j / 2 * 2
            tree[j / 2] = tree[j / 2 * 2] + tree[j / 2 * 2 + 1] 
            j /= 2
            
    def sumRange(self, i, j):
        """
        sum of elements nums[i..j], inclusive.
        :type i: int
        :type j: int
        :rtype: int
        """
        return self.getSumFromTree(i, j, self.tree)
        
    def getSumFromTree(self, l, r, tree):
        n = len(self.nums)
        r_sum = 0
        l += n; r += n
        while l <= r:
            if l % 2 == 1: # l is a right node
                r_sum += tree[l]
                l += 1 # now l must be a left node
            if r % 2 == 0: # r is a left node
                r_sum += tree[r]
                r -= 1 # now r must be a right node
            l /= 2
            r /= 2
        return r_sum
            



# Your NumArray object will be instantiated and called as such:
# numArray = NumArray(nums)
# numArray.sumRange(0, 1)
# numArray.update(1, 10)
# numArray.sumRange(1, 2)
