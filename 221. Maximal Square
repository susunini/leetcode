# Note:
# Solution 1: DP Time O(n^2) Space O(n^2)
# dp[i][j] = 0 if matrix[i][j] == 0
#          = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1
# Solution 2: DP Time(O^2) Space O(n)
# only need to keep previous row and previous entry

class Solution(object):
    def maximalSquare(self, matrix):
        """
        :type matrix: List[List[str]]
        :rtype: int
        """
        r_max = 0
        if len(matrix) < 1 or len(matrix[0]) < 1:
            return 0
        n, m = len(matrix), len(matrix[0])
        dp = [[0] * (m + 1) for i in range(n + 1)]
        for i in range(1, n + 1):
            for j in range(1, m + 1):
                if matrix[i-1][j-1] == "1":
                    dp[i][j] = min([dp[i-1][j-1], dp[i-1][j], dp[i][j-1]]) + 1
                    r_max = max(r_max, dp[i][j])
        return r_max * r_max
