# Note:
# Solution 1.1: Use list instead of dictionary to store children; beats only 19% instead of 97%

class TrieNode(object):
    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.child = [None] * 27
        
class Trie(object):

    def __init__(self):
        self.root = TrieNode()

    def insert(self, word):
        """
        Inserts a word into the trie.
        :type word: str
        :rtype: void
        """
        cur = self.root
        for ch in word:
            idx = ord(ch) - ord('a')
            if cur.child[idx] is None:
                newNode = TrieNode()
                cur.child[idx] = newNode
            cur = cur.child[idx] # 
        cur.child[-1] = "#"
                
    def search(self, word):
        """
        Returns if the word is in the trie.
        :type word: str
        :rtype: bool
        """
        cur = self.root
        for ch in word:
            idx = ord(ch) - ord('a')
            if cur.child[idx]:
                cur = cur.child[idx]
            else:
                return False
        if cur.child[-1] == "#":
            return True
        else:
            return False
        
    def startsWith(self, prefix):
        """
        Returns if there is any word in the trie
        that starts with the given prefix.
        :type prefix: str
        :rtype: bool
        """
        cur = self.root
        for ch in prefix:
            idx = ord(ch) - ord('a')
            if cur.child[idx]:
                cur = cur.child[idx]
            else:
                return False
        return True
        

# Your Trie object will be instantiated and called as such:
# trie = Trie()
# trie.insert("somestring")
# trie.search("key")
